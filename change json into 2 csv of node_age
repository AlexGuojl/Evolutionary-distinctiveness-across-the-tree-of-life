import pandas as pd
import numpy as np

#####read the json field and edit the structure
df_ages = pd.read_json("node_ages.json")
df_ages['node_ages'] = df_ages['node_ages'].astype(str)

###for those ages that have 2 ott id:

ages0 = df_ages.drop(df_ages.tail(8001).index) ##keep the rows that have 2 ott id and store as ages0
listage = []
for row in ages0.itertuples():
    listage.append(row)

ages_final = pd.DataFrame(listage)

ages_final['mrca'] = ages_final["Index"].map(lambda x:x.split("ott")[0])
ages_final['ott1'] = ages_final["Index"].map(lambda x:x.split("ott")[1])
ages_final['ott2'] = ages_final["Index"].map(lambda x:x.split("ott")[2])

import re
all_ages_list = []  #list that store the dict of ages
averages = []  #list to store average of several ages
age_list0 = ages_final['node_ages'].tolist()
##get ages from the columns
for i in age_list0:
    pattern = re.compile(r'{\'age\': (\d+\.?\d*),')
    result = pattern.findall(i)
    result = list(map(lambda x:float(x), result))
    all_ages_list.append(result)
    aver_ages.append(sum(result)/len(result))
ages_final['ages'] = all_ages_list
ages_final['average'] = averages
##ages final is a dataframe includes two ott id and its corresponding age



###for ages have only one ott id
ages1 = df_ages.drop(df_ages.head(46567-8001).index) #
listage1 = []
for row in ages1.itertuples():
    listage1.append(row)
ages_final1 = pd.DataFrame(listage1)
ages_final1['ott'] = ages_final1["Index"].map(lambda x:x.split("ott")[1])

all_ages_list1 = []
aver_ages1 = []
age_list1 = ages_final1['node_ages'].tolist()
for i in age_list1:
    pattern = re.compile(r'{\'age\': (\d+\.?\d*),')
    result = pattern.findall(i)
    result = list(map(lambda x:float(x), result))
    all_ages_list1.append(result)
    aver_ages1.append(sum(result)/len(result))

ages_final1['ages'] = all_ages_list1
ages_final1["average"] = aver_ages


##ages_final1 is a dataframe includes one ott id and its corresponding age











