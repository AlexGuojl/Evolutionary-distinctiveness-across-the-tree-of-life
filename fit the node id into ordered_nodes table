import pandas as pd

df_nodes = pd.read_csv("ordered_nodes.csv",low_memory=False)
nodes1 = pd.DataFrame(df_nodes,columns = ["id","ott","parent","real_parent","node_rgt","leaf_lft","leaf_rgt"])

df_leaves = pd.read_csv("ordered_leaves.csv",low_memory=False)
leaves1 = pd.DataFrame(df_leaves,columns = ["id","parent","ott"])

agetable = pd.read_csv('age of 2 ott.csv',low_memory=False) ##this is the age 1 described
                                                              ## in previous field but have only 3 columns:
                                                              ##ott1, ott2 and average
                                                              def find_leaf_parents(a):##find parents based on a leaf id(a)
   
   


def find_node_parents(a):##find parents based on a node id(a)
    list_parentsn = []
    lft = nodes1.iat[int(a)-1,5]
    rgt = nodes1.iat[int(a)-1,6]
    nodesn = nodes1.loc[(nodes1["leaf_lft"]<= lft) & (nodes1["leaf_rgt"] >= rgt)]
    for row in nodesn.itertuples():
        list_parentsn.append(getattr(row,"id"))
    return list_parentsn


def find_leaf_parents_1(a):##find parents based on a leaf id(a)
    list_parentsl = []
    cp = leaves1.iat[int(a)-1,1]
    while cp != -27400288:
        list_parentsl.append(cp)
        cp = nodes1.iat[int(cp)-1,2]
    return list_parentsl


def find_node_parents_1(a):##find parents based on a node id(a)
    list_parentsn = []
    cp = nodes1.iat[int(a)-1,2]#current parents
    while cp != -27400288:
        list_parentsn.append(cp)
        cp = nodes1.iat[int(cp)-1,2]
    return list_parentsn##whether it should include itself?


def OTT2ID(a):##to see whether this ott id is in leaves table or nodes table
    dict1 = {}
    if a in nodes1["ott"].values:
        nodeid = nodes1.loc[nodes1["ott"]==a, "id"].iloc[0]
        dict1["nodeid"] = nodeid
        return(dict1)
    if a in leaves1["ott"].values:
        leafid = leaves1.loc[leaves1["ott"]==a, "id"].iloc[0]
        dict1["leafid"] = leafid
        return(dict1)
    else:
        return(-1)
   
####only case 2 need to be solve: ages with 2 ott id

def find_commonancestor(a,b):## a and b are ott id
    id1 = OTT2ID(a)##a dictionary
    id2 = OTT2ID(b)
    ##for ott a
    if OTT2ID(a) == -1 or OTT2ID(b) == -1:
        return(-1)###neither in leaves nor nodes
    else:
        if list(id1)[0] == "nodeid":
            nodeida = list(id1.values())[0]
            parentsa = find_node_parents_1(nodeida)###list of parents
        if list(id1)[0] == "leafid":
            leafida = list(id1.values())[0]
            parentsa = find_leaf_parents_1(leafida)###list of parents
        ###for ott b
        if list(id2)[0] == "nodeid":
            nodeidb = list(id2.values())[0]
            parentsb = find_node_parents_1(nodeidb)###list of parents
                        ###find list of parents from node table
        if list(id2)[0] == "leafid":
            leafidb = list(id2.values())[0]
            parentsb = find_leaf_parents_1(leafidb)
        parentsa = sorted(parentsa,reverse = True)
        #print(parentsa[0:10])
        parentsb = sorted(parentsb,reverse = True)
        #print(parentsb[0:10])
        for i in parentsa:
            if i in parentsb:
                nodeid = i
                break
        return(nodeid)
               
ls_nodeid = []  
for row in agetable.itertuples():
    ott1 = int(getattr(row,"ott1"))
    ott2 = int(getattr(row,"ott2"))
    ls_nodeid.append(find_commonancestor(ott1,ott2))
agetable["id"] = ls_nodeid
agetable.to_csv('new correct node age for nodes with 2 ott.csv',encoding = "gbk")

agetable1 = pd.read_csv('new correct node age for nodes with 2 ott.csv',low_memory=False)
agetable1 = pd.DataFrame(agetable1,columns = ["id","average"])

agetable2 = pd.read_csv('node age of nodes with ott.csv',low_memory=False) ###the agetable of ages that have an ott i
agetable2 = pd.DataFrame(agetable2,columns = ["id","average"])


###find overlapped  node id and calculate the average or delete the incorrect one


overlap_id1 = agetable1.groupby(["id"]).size()
col1 = overlap_id1[overlap_id1>1].reset_index()[["id"]]
overlap_id1 = pd.merge(col1,agetable1,on = ["id"])

##delete overlapped id from agetable1
ls1 = []
for row in agetable1.itertuples():
    if getattr(row,"id") in overlap_id1["id"].values:
        ls1.append(0)
    else:
        ls1.append(1)

agetable1["isin"] = ls1
agetable1 = agetable1.drop(agetable1[agetable1["isin"] == 0].index)###should have 29734 rows
agetable1 = pd.DataFrame(agetable1,columns = ["id","average"])

###calculate the average of age for overlapped id and add them to agetable1
overlapid_dict = overlap_id1.groupby('id')['average'].mean().to_dict()
overlap_id1['average'] = overlap_id1['id'].map(overlapid_dict)
overlap_id1 = overlap_id1.drop_duplicates()
total_age_with_2_ott = pd.concat([agetable1,overlap_id1],axis = 0)

##find overlapped id between agetable1/2 and delete 1 if in 2
ls2 = []
for row in total_age_with_2_ott.itertuples():
    if getattr(row,"id") in agetable2["id"].values:
        ls2.append(0)
    else:
        ls2.append(1)

        
total_age_with_2_ott["ls"] = ls2
total_age_with_2_ott = total_age_with_2_ott.drop(total_age_with_2_ott[total_age_with_2_ott["ls"] == 0].index)                 


###combine agetable1 and agetable2, fit them into ordered_nodes
total_ages = pd.concat([total_age_with_2_ott,agetable2],axis = 0)


###generate an age table that includes all the nodes with age data





